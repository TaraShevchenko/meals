// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Menu {
  id        String     @id @default(uuid())
  date      DateTime   @unique
  menuMeals MenuMeal[] @relation("MenuToMenuMeal")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Meal {
  id         String          @id @default(uuid())
  name       String?
  components MealComponent[] @relation("MealToComponent")
  menuMeals  MenuMeal[]      @relation("MealToMenuMeal")
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model MenuMeal {
  id       String   @id @default(uuid())
  menu     Menu     @relation("MenuToMenuMeal", fields: [menuId], references: [id], onDelete: Cascade)
  menuId   String
  meal     Meal     @relation("MealToMenuMeal", fields: [mealId], references: [id], onDelete: Cascade)
  mealId   String
  mealType MealType
  order    Int      @default(0)
}

model MealComponent {
  id          String                    @id @default(uuid())
  name        String
  type        ComponentType
  ingredients MealComponentIngredient[]
  meals       Meal[]                    @relation("MealToComponent")
  createdAt   DateTime                  @default(now())
  updatedAt   DateTime                  @updatedAt
}

model MealComponentIngredient {
  id           String        @id @default(uuid())
  quantity     Float
  ingredient   Ingredient    @relation(fields: [ingredientId], references: [id])
  ingredientId String
  component    MealComponent @relation(fields: [componentId], references: [id])
  componentId  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Ingredient {
  id               String                    @id @default(uuid())
  name             String                    @unique
  calories         Float
  protein          Float?
  carbs            Float?
  fat              Float?
  productNames     String[]
  components       MealComponentIngredient[]
  orderReportItems OrderReportItem[]
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
}

enum ComponentType {
  FIBER
  PROTEIN
  CARBS
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

model OrderReport {
  id        String            @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  items     OrderReportItem[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model OrderReportItem {
  id           String      @id @default(uuid())
  report       OrderReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     String
  ingredient   Ingredient  @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Float
  path         String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
